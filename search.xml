<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[python文件操作]]></title>
      <url>%2F2017%2F02%2F21%2FPython%E4%B9%8B%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%2F</url>
      <content type="text"><![CDATA[文件操作文件操作流程： 1.首先打开文件，获取文件句柄后并且赋值给一个变量 2.通过文件句柄对文件进行读、写、读写、写读等操作 3.执行完上述操作，关闭文件 举例说明，如下文件内容：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869让我掉下眼泪的 不止昨夜的酒让我依依不舍的 不止你的温柔余路还要走多久 你攥着我的手让我感到为难的 是挣扎的自由分别总是在九月 回忆是思念的愁深秋嫩绿的垂柳 亲吻着我额头在那座阴雨的小城里我从未忘记你成都 带不走的 只有你和我在成都的街头走一走直到所有的灯都熄灭了也不停留你会挽着我的衣袖我会把手揣进裤兜走到玉林路的尽头坐在小酒馆的门口分别总是在九月 回忆是思念的愁深秋嫩绿的垂柳 亲吻着我额头在那座阴雨的小城里我从未忘记你成都 带不走的 只有你和我在成都的街头走一走直到所有的灯都熄灭了也不停留你会挽着我的衣袖我会把手揣进裤兜走到玉林路的尽头坐在小酒馆的门口和我在成都的街头走一走直到所有的灯都熄灭了也不停留和我在成都的街头走一走直到所有的灯都熄灭了也不停留你会挽着我的衣袖我会把手揣进裤兜走到玉林路的尽头走过小酒馆的门口和我在成都的街头走一走直到所有的灯都熄灭了也不停留 基本操作及演示代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128'''#data = open("chengdu").read()#print(data)f = open("chengdu2",'r') #文件句柄#data = f.read()#data2 = f.read()#print(data)#print('--------------data2---------------',data2)#在文件中写入内容f1 = open("chengdu",'w')#只能写不能读f1.write("赵雷2017我是歌手成名曲,\n")f1.write("歌曲有画、成都、月亮粑粑。。。")''''''w模式写文件是覆盖之前的文件内容\n换行符''''''#在文件中既能写也能追加f2 = open("chengdu2",'a')#只能写不能读f2.write("赵雷2017我是歌手成名曲,\n")f2.write("歌曲有画、成都、月亮粑粑。。。")f2.close()#是否也可写也可以读呢？''''''f3 = open("chengdu2",'r')f3.write("\nwhen i was young i listen to the radio\n")data = f3.read()print('--read',data)f3.close()'''#一行一行的读取文件内容#f4 = open("chengdu2",'r')#文件句柄#for i in range(5):# print(f4.readline())'''#文件循环一遍，在第N行不打印f5 = open("chengdu2",'r')#for line in f5.readlines():# #print(f5.readlines())# print(line.strip())#低效循环，比如，循环操作，在第2行不打印for index,line in enumerate(f5.readlines()):#通过下标来读取操作 if index == 2: print('-------------分割线-------------') continue print(line.strip())''''''#高效循环方法，内存中之存储当前的一行。f5 = open("chengdu2",'r')count = 0for line in f5: if count == 9: print('-------分隔符---------') count+=1 continue print(line) count +=1''''''#seek回到之前位置 tell打印当前光标位置,其两个一起使用f6 = open("chengdu2",'r')#文件句柄print(f6.tell())#打印启始位置print(f6.read(40))#读取第五行位置内容print(f6.readlines())#打印当前文件内容print(f6.tell())#打印当前位置f6.seek(0)#回到起始位置print(f6.readlines())#打印当前位置的文件内容#打印文件编码格式print(f6.encoding)#返回一个编号print(f6.fileno())#刷新文件内容print(f.flush())#截取代码truncatef = open("chengdu2","a")f.seek(10)#先返回第10个字符f.truncate(20)''''''#文件修改（读写：只能追加）#f = open("chengdu2",'r+')print(f.readline())print(f.readline())print(f.readline())#打印前三行，然后写东西f.write("--------------TEST---------------")''''''#文件修改(写读）#xf = open("chengdu2",'w+')#先写四条信息f.write('----------分割线----------\n')f.write('----------分割线----------\n')f.write('----------分割线----------\n')f.write('----------分割线----------\n')print(f.tell())#打印位置f.seek(10)#回到第十个字符位置print(f.tell())#打印位置print(f.readlines())#在打印一行f.write('---------是否会在打印第一行后面追加？-----------')#从上述打印一行下，是“否会在打印第一行后面追加？”，此处显示不会更改源文件里面的内容，只会在后面追加f.close()#追加读写f = open("chengdu2",'a+')#文件句柄，追加读写''''''#二进制文件读取该文件#f = open("chengdu2",'rb')#二进制读f = open("chengdu2",'wb')#二进制写f.write("hello world\n".encode())#此处的helloworld为Str，必须转换成Bytef.close()''']]></content>
    </entry>

    
    <entry>
      <title><![CDATA[python集合操作]]></title>
      <url>%2F2017%2F02%2F18%2Fpython%E4%B9%8B%E9%9B%86%E5%90%88%2F</url>
      <content type="text"><![CDATA[集合操作集合是一个无序的，不重复的数据组合，它的主要作用如下: 去重，把一个列表变成集合，就自动去重了 关系测试，测试两组数据之前的交集、差集、并集等关系 常用操作:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354list_1 = [1,4,5,7,3,6,7,9]list_1 = set(list_1)print(list_1,type(list_1))list_2 = set([2,6,0,66,22,8,4])print(list_2,list_1)#关系测试，取交集list_1、list_2print(list_1.intersection(list_2))#关系测试，list_1、list_2取并集print(list_1.union(list_2))#关系测试，list_1、list_2取差集 in list_1 but not in list_2(list_1里面有的list_2中没有的)print(list_1.difference(list_2))#关系测试，list_1、list_2取子集print(list_1.issubset(list_2))#关系测试，list、list_3 是否存在父集list_3 = set([1,3,7])print(list_1.issuperset(list_3))#关系测试，反向差集 （互相没有的元素都取出来)print(list_1.symmetric_difference(list_3))print("======================================================")#关系测试，list_4 = set([5,6,8])print(list_3.isdisjoint(list_4))"""#交集list_1 = [1,3,5,7,9,0]list_2 = [2,3,4,5,6]print(list_1 &amp; list_2)#并集(union)print(list_1 | list_2)#求差集(difference)print(list_1 - list_2)#对称差集print(list_1 ^ list_2)#集合里面元素添加list_1.append('99')print(list_1)]]></content>
    </entry>

    
  
  
</search>
